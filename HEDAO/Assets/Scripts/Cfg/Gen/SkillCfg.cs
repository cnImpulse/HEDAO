
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace Cfg
{
public sealed partial class SkillCfg : Luban.BeanBase
{
    public SkillCfg(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        Icon = _buf.ReadString();
        Cost = _buf.ReadInt();
        ReleaseRange = Battle.GridRange.DeserializeGridRange(_buf);
        EffectRange = Battle.GridRange.DeserializeGridRange(_buf);
        TargetType = (ERelationType)_buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Effect = new System.Collections.Generic.List<Battle.Effect>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.Effect _e0;  _e0 = Battle.Effect.DeserializeEffect(_buf); Effect.Add(_e0);}}
    }

    public static SkillCfg DeserializeSkillCfg(ByteBuf _buf)
    {
        return new SkillCfg(_buf);
    }

    public readonly int Id;
    public readonly string Name;
    public readonly string Desc;
    public readonly string Icon;
    public readonly int Cost;
    public readonly Battle.GridRange ReleaseRange;
    public readonly Battle.GridRange EffectRange;
    public readonly ERelationType TargetType;
    public readonly System.Collections.Generic.List<Battle.Effect> Effect;
   
    public const int __ID__ = -2087897997;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        ReleaseRange?.ResolveRef(tables);
        EffectRange?.ResolveRef(tables);
        
        foreach (var _e in Effect) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Icon:" + Icon + ","
        + "Cost:" + Cost + ","
        + "ReleaseRange:" + ReleaseRange + ","
        + "EffectRange:" + EffectRange + ","
        + "TargetType:" + TargetType + ","
        + "Effect:" + Luban.StringUtil.CollectionToString(Effect) + ","
        + "}";
    }
}

}
